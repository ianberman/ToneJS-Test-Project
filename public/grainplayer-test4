
<!DOCTYPE HTML>
<html>
<head>
   <title>mygrains</title>

   <script type="text/javascript" src="https://unpkg.com/tone@13.4.9/build/Tone.js">
     console.log('toned');
   </script>

   <style>

    #images{
      margin: 0 auto;
      overflow: hidden;
      background-image: url("glitch.png");
      height: 179px;
      background-position: center;
      background-repeat: repeat-x;
      background-size: 514px;
      position: relative;
    }

    .bgrect{
      margin:0 auto;
      width: 80%;
      height: 90px;
      background-color: #C4C4C4;

      font-family: Roboto;
      font-style: normal;
      font-weight: bold;
      font-size: 18px;
      text-align: center;
      letter-spacing: 0.05em;

      color: black;

      mix-blend-mode: normal;
      text-shadow: 0px 4px 10px rgba(0, 0, 0, 0.25);

      display: grid;
      grid-template-columns: auto auto auto auto auto;
    }

    .griditem{
      border: 1px;
      font-size: 24px;
      text-align: center;
      line-height: 90px;
    }

    .welcome-params-wrapper{
      margin: 0 auto;
      display: grid;
      grid-template-columns: auto auto;
      width: 80%;
    }

    .welcome{
      float: left;
      padding-top: 20px;
      /* padding-left: 10%; */
    }

    .params{
      align-self: flex-end;
      justify-self: end;
      /* padding-left: 40%; */
    }

   </style>
</head>
<body>
  <div id="images">
  </div>

  <div class="bgrect">

    <div class="griditem"><a href="#home">home</a></div>
    <div class="griditem"><a href="#music">music</a></div>
    <div class="griditem"><a href="#research">research</a></div>
    <div class="griditem"><a href="#code">code</a></div>
    <div class="griditem"><a href="#resumecv">resume/cv</a></div>

  </div>

  <div class="welcome-params-wrapper">
    <div class="welcome">
      <img src="robin-welcome.gif">
    </div>

    <div class="params">
      <br>
      <button onclick="startbuttonfunction()">woof!</button>
      &nbsp
      &nbsp
      <button onclick="stopbuttonfunction()">nowoof!</button>
      <br>
      <br>

      <!-- set the grain size
      	0.01 - 0.3 seconds, calculate from 1-100 range in function
      	default of 0.15 (50/100) -->
      <i>grain size:</i>
      <br>
      <input type="range" oninput="set_grainsize(this.value)">
      <output id="grainsize">0.054</output>
      <br>
      <br>

      <!-- set the playback rate
      	0.0 - 2.0 (speed), calculate from 1-100 range in function
      	default of 1 (50/100) -->
      <i>playback rate:</i>
      <br>
      <input type="range" oninput="set_playback(this.value)">
      <output id="playback">0.3</output>
      <br>
      <br>

      <!-- set the overlap amount (seconds)
      	0.01 - 0.2, calculate from 1-100 range in function
      	default of 0.05 (25/100) -->
      <i>overlap (seconds):</i>
      <br>
      <input type="range" oninput="set_overlap(this.value)" value="25">
      <output id="overlap">0.2</output>
      <br>
      <br>

      <i>Loop Start (seconds)</i>
      <br>
      <output id="loopstart">1</output>
      <br>
      <br>

      <i>Loop End (seconds)</i>
      <br>
      <output id="loopend">2</output>
      <br>
      <br>

      <form name ="show">
        <input type="text" name="mouseXField" value="0" size="6"><i>Mouse X Position</i><br>
        <input type="text" name="mouseYField" value="0" size="6"><i>Mouse Y Position</i><br>
      </form>
    </div>




  <script>

    //------MOUSE INIT-----------

    document.captureEvents(Event.MOUSEMOVE);
    document.captureEvents(Event.MOUSEDOWN);

    document.onmousemove = function (e) {mousePos(e);};

      var mouseX = 0;
      var mouseY = 0;
      var w = window.innerWidth;
      var h = window.innerHeight;

    //------GRAINPLAYER INIT-----------
  	var thebuff = new Tone.Buffer("pad.mp3");
  	var grainer;

  	// wait to initialize the player when all buffers have been loaded
  	Tone.Buffer.on('load', function(){
  		// after loading the buffer, create the Tone.GrainPlayer
  		grainer = new Tone.GrainPlayer(thebuff);

  		// hard code defaults
  		// the better way to do this is probably when you create the GrainPlayer
  		grainer.grainSize = 0.054;
  		grainer.playbackRate = 0.3;
  		grainer.detune = 0;
  		grainer.overlap = 0.2;
  		grainer.loop = true;
      // grainer.loopStart = 1; //sec
      // grainer.loopEnd = 2;
      grainer.fadeIn = 0.1; //prevents clicks


  		grainer.toMaster();
  	})

    //-------BUTTONS INIT----------
    function startbuttonfunction() {
      grainer.start();
     }

     function stopbuttonfunction() {
       grainer.stop();
     }

    //------SYNTH PARAMS-----------

  	function set_grainsize(gsize) {
  		var actualsize = (gsize/100.0 * 0.2) + 0.01;
  		grainer.grainSize = actualsize;
      roundsize = actualsize.toFixed(3);
  		// display the value
  		document.getElementById('grainsize').innerHTML = roundsize;
  	}

  	function set_playback(rate) {
  		var actualrate = rate/100.0;
  		grainer.playbackRate = actualrate; // from 1-100 range
      roundrate = actualrate.toFixed(2);

  		// display the value
  		document.getElementById('playback').innerHTML = roundrate;
  	}

  	function set_overlap(over) {
  		var actualover = (over/100 * 0.2) + 0.01;
  		grainer.detune = actualover;
      roundover = actualover.toFixed(3);
  		// display the value
  		document.getElementById('overlap').innerHTML = roundover;
  	}

    // function set_loopStart(start) {
    //   var actualstart = (start/100 * 30) + 0.01;
    //   grainer.loopStart = actualstart;
    //   // display the value
    //   document.getElementById('loopstart').innerHTML = actualstart;
    // }
    //
    // function set_loopEnd(end) {
    //   var actualend = (end/100 * 30) + 0.01;
    //   grainer.loopEnd = actualend;
    //   // display the value
    //   document.getElementById('loopend').innerHTML = actualend;
    // }

    //------MOUSE INIT-----------
    function mousePos (e) {
      mouseX = e.pageX;
      mouseY = e.pageY;

      document.show.mouseXField.value = mouseX;
      document.show.mouseYField.value = mouseY;



      pgrmstart = ((mouseX / w) * 30 + 0.5);
      var roundpgrmstart = pgrmstart.toFixed(1);
      document.getElementById('loopstart').innerHTML = roundpgrmstart;
      grainer.loopStart = (roundpgrmstart);

      pgrmend = ((mouseY / h) * 30 + 0.5);
      var roundpgrmend = pgrmend.toFixed(1);
      grainer.loopEnd = (roundpgrmend);
      document.getElementById('loopend').innerHTML = roundpgrmend;

      return true;
    }


  </script>

  <!-- <script>
    window.addEventListener('load', init);
  //   var audiohover;
  //
  //   function init() {

  //     var audiohover = document.getElementsByClassName("griditem");
  //     for (var i = 0; i < audiohover.length; i++) {
  //       audiohover[i].addEventListener('mouseover', hovered);
  //     }
  //     // console.log("ah: " + audiohover);
  //     // audiohover.addEventListener('mouseover', hovered);
  //   }
  //
  //   console.log("ah: " + audiohover);
  //
  //   for (var i = 0; i < griditem.length; i++) {
  //     grititem[i].addEventListener('mouseover', hovered);
  //   }
  //
  //   function hovered() {
  //     var synth = new Tone.FMSynth().toMaster()
  //     //play a middle 'C' for the duration of an 8th note
  //     var notegenr = new Tone.CtrlRandom(220, 880);
  //     console.log(notegenr.value);
  //
  //
  //
  //     synth.triggerAttackRelease(notegenr.value, "8n");
  //
  //     console.log('hovered');
  //   }
  //
 // </script> -->


</body>
</html>
